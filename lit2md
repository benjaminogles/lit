#! /usr/bin/env bash

set -e
set -o pipefail

fail() {
    echo "$1" >&2
    exit 2
}

usage() {
    cat >&2 <<EOF
$1
usage:

    lit2md [-o <file>] <file1> [<file2> ...]

description:

    lit converts source code to markdown

    the output is written to <file> if given and to index.md
    in the current working directory otherwise

    plain text input files are assumed to contain markdown and
    are inlined into the final document

    lit is intended to be used as a literate programming tool
    by converting self contained programs with complete comments
    into documents designed for human review

directives:

    by default, lit will simply create markdown code blocks to
    format source code

    comments starting with these keywords are treated as directives
    that can improve on this default

    - lit text
    - lit skip
    - lit unskip
    - lit execute [<command-line>]

    the lit text directive causes lit to create a markdown paragraph
    from the following consecutive lines of comments

    the lit skip directive causes lit to stop generating output while
    reading subsequent lines of input, until a lit unskip directive
    is given (including output generated by the lit execute directive)

    the lit execute directive provides a shell command that will
    be executed in the same directory as the input file and have its
    output (if any) formatted as plain text in the final document

    when no command line is given, and an appropriate interpreter for
    the input file can be found (e.g. as given by a script's shebang),
    then lit will interpret the file up to that point and format any
    generated output as plain text in the final document

    subsequent lit execute directives with no command line will continue
    to use the same interpreter state, allowing for incremental script
    execution

    the directory of the input file is listed after each lit execute
    directive to check for changes to, or creation of, image files that
    will be copied to a sub directory alongside the output file and
    linked to in the document

    please see the tests directory of the lit repository for complete
    examples on how these directives may be used in practice
EOF
    exit 1
}

recurse() {
    "$0" "$@"
}

dotest() {
    indir=/tmp/lit.in.d
    outdir=/tmp/lit.out.d
    [ -d ./tests ] || fail "test directory does not exist"
    for testin in $(find ./tests -mindepth 1 -maxdepth 1 -type d)
    do
        [ -d $indir ] && rm -r $indir
        [ -d $outdir ] && rm -r $outdir
        cp -r "$testin" $indir
        testargs=( $(find $indir -maxdepth 1 -type f ! -name '*.md' ! -name "*.html") )
        if [ "$1" == "generate" ]
        then
            echo "generating $testin/index.md (${testargs[@]})"
            recurse -o $outdir/index.md "${testargs[@]}"
            cp $outdir/index.md "$testin/index.md"
            [ -d $outdir/index-figures ] && cp -r $outdir/index-figures "$testin/"
        elif [ ! -f "$testin/index.md" ]
        then
            fail "expected test output not found: $testin/index.md"
        else
            echo "running $testin"
            recurse -o $outdir/index.md "${testargs[@]}"
            diff "$testin/index.md" $outdir/index.md || fail "failed test: $testin"
        fi
    done
    echo "all tests passed"
}

ptest=
pfile=${LIT_OUT_DIR:-$(pwd)}/index.md
proot=$(cd $(dirname $(readlink -f "$0")); pwd -P)
pscripts=$proot/scripts

while getopts :t:o: arg
do
    case "$arg" in
        t) ptest=$OPTARG ;;
        o) pfile=$OPTARG ;;
        :) usage "-$OPTARG requires an argument" ;;
        ?) usage "unknown option -$OPTARG" ;;
    esac
done

shift $(( OPTIND - 1 ))

if [ ! -z "$ptest" ]
then
    dotest "$ptest"
    exit 0
fi

if [ $# -eq 0 ]
then
    usage
fi

[ -f "$pfile" ] && rm "$pfile"

pdir=$(cd "$(dirname "$pfile")"; pwd)
mkdir -p "$pdir"
pfile=$pdir/$(basename "$pfile")

pfigures=$(basename "$pfile")
pfigures=${pfigures%%.*}-figures
[ -d "$pdir/$pfigures" ] && rm -r "$pdir/$pfigures"
mkdir "$pdir/$pfigures"

pscratch=$(mktemp -d)
pfifo=$pscratch/lit-repl-fifo
mkfifo "$pfifo"

cleanup() {
    rm -rf "$pscratch"
    if [ -z "$(find "$pdir/$pfigures" -mindepth 1 -maxdepth 1 -type f)" ]
    then
        rmdir "$pdir/$pfigures"
    fi
}

trap "cleanup" EXIT

for infile in "$@"
do
    inext=${infile##*.}
    if [ ! -f "$infile" ]
    then
        fail "could not find input file $infile ($(pwd))"
    elif [ "$inext" == "txt" ] || [ "$inext" == "md" ]
    then
        cat "$infile" >> "$pfile"
    else
        pushd "$(dirname "$infile")" > /dev/null
        awk -v OUTPUT_DIR="$pdir" \
            -v FIGURES_DIR="$pfigures" \
            -v BREAKPOINT_FIFO="$pfifo" \
            -f "$pscripts/lit-main.awk" \
            "$(basename "$infile")" >> "$pfile"
        popd > /dev/null
    fi
done

