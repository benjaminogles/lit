================================
lit: a literate programming tool
================================

lit creates a markdown or HTML file from a list of text and source
code files

lit is intended to be used for presenting programs that were designed
to become such documents in the first place e.g. as the subject of a
technical article or tutorial

it is assumed that the input files are given in an order such that
the final document follows a logical narrative

as many source code comments will be extracted into the text content
of the final document, they should usually form a large part of that
narrative by explaining the program in detail

markdown content and source code comments may also contain directives
that prompt lit to build and run programs with the output inlined into
the document

usage
-----

usage: lit [options] format file1 [file2 ...]

options:
    -m extra-meta-html-file (e.g. stylesheets, open graph meta)
    -h extra-header-html-file (e.g. site banner)
    -f extra-footer-html-file (e.g. script tags, site links)
    -o output-directory

output formats:
    markdown (html flags have no effect)
    html

description:
    input files may contain markdown or source code

    lit translates source code to markdown and concatenates
    the result of each input file into a single document,
    optionally converting to HTML and constructing a complete
    web page together with any HTML content provided via
    command line options

    the output file is named index.md or index.html and is
    written to the current working directory by default

    input files may contain directives that prompt lit to e.g.
    build and run programs, piping the output into the markdown
    document

    any site assets generated by these programs should be
    written to the current working directory so lit can detect
    them

directives
----------

- execute: build/execute the entire file
- run: display and run a shell command
- substitute: run a shell command without displaying it
- tee: display the next code block as usual and pipe it into a program
- pipe: consume the next code block without displaying it and pipe it into a program
- text: include comment block as text content in document
- author: specify document author
- title: specify document title
- description: specify document description
- skip: skip input content until next unskip directive
- unskip: stop skipping input content

comments translated by the text directive are treated as containing markdown content already

the text, skip and unskip directives do not apply to text documents

see the examples directory
