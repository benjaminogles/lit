================================
lit: a literate programming tool
================================

lit turns your literate programming project into a web page

disclaimer
----------

lit does not attempt to implement a literate programming environment as envisioned by its originators

in fact, lit may be better described as "a comment-driven-development tool for publishing programs to the web"

intended use
------------

- you write program(s) with comments that follow a complete narrative (similar to a blog post)
- you use lit to generate HTML from your program(s)
- you publish the result to a website

advantages
----------

- the published content is kept in sync with the related source code
- the program and its presentation are created in the same step
- the information is all easily accessed as plain text
- the required markup is minimal and easy to customize

disadvantages
-------------

- organizing code into a narrative may not align with other programming best practices
- similar, more capable tools already exist

usage
-----

the following command will generate HTML from sort.c

    lit sort.c

the output is written to index.html in the working directory

you can use command line options to change the output directory and include additional HTML content in several places

    lit -o out \
        -m meta.html \
        -h header.html \
        -f footer.html \
        sort.c

you can pass multiple file names to generate a single page from them

markup
------

source code comments and the content of text files are interpreted as markdown

comments and markdown content can customize HTML generation via lit directives

directives
----------

- author: specify document author
- title: specify document title
- description: specify document description
- section: include comment block in document and add a heading
- content: include comment block in document
- skip: skip comments and/or code block
- run: run a shell command or a block of code

the skip and section directives are disabled in text files and the content directive is implicitly active

the section directive is technically unnecessary but may be preferred for the common case of a flat document structure

see the examples directory for complete examples

comparison with org mode
------------------------

emacs org mode implements a proper literate programming environment with many powerful features

- you write the program in blocks, embedded in the documentation, rather than the other way around
- you can view the output of code blocks interactively inside the document
- you can run code blocks inside sessions (e.g. connecting the interpreter state between blocks)
- you can label the otherwise anonymous output of code blocks to reference later (e.g. pass data between blocks written in different languages)
- you can use just about any programming language within the same document
- you can export to HTML/PDF/etc

lit is a good alternative if you just want to generate web pages from commented source code

comparison with documentation generators (sphinx/doxygen)
---------------------------------------------------------

configured correctly, documentation generators such as sphinx could likely achieve the same goal as lit

it is simpler to do the following with lit

- display source code interleaved with its documentation
- display the output of programs

comparison with jupyter notebooks
---------------------------------

using jupyter notebooks to generate web pages out of programs is like driving an airplane to a drive through

the problems solved by jupyter notebooks and its various kernels and tools are much more complicated than just generating a web page

so although it is overkill for the use case lit addresses, it would be the right choice if the programs you write benefit from its features

- the notebooks are written in cells that are configured for markdown or a kernel
- the cells are executed by kernels which allow them to access shared state
- the existing ecosystem of kernels and tools provide a lot of powerful features
- the output of cells is displayed inline in the document and individual cells can be re-ran interactively
- the whole document can be exported to HTML/PDF/etc
- jupytext gives you the same capabilities in a plain text document

