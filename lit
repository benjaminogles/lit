#! /usr/bin/env bash

set -e
set -o pipefail

fail() {
    echo "$1" >&2
    exit 2
}

usage() {
    cat >&2 <<EOF
$1
usage: lit [options] file1 [file2 ...]

options:
    -m extra-meta-html-file (e.g. stylesheets, open graph meta)
    -h extra-header-html-file (e.g. site banner)
    -f extra-footer-html-file (e.g. site links)
    -o output-directory

description:
    input files may contain markdown or source code

    lit translates source code to markdown and concatenates
    the result of each file into a single document index.md

    this file is converted to HTML and embedded in index.html
    which is constructed to contain a single article and any
    content given through command line options

    input files may contain directives that prompt lit to e.g.
    build and run programs, piping the output into the markdown
    document

    any site assets generated by these programs should be
    written to relative paths so that lit can control where they
    end up by changing the working directory
EOF
    exit 1
}

recurse() {
    "$0" "$@"
}

dotest() {
    [ -d ./tests ] || fail "test directory does not exist"
    echo "running tests"
    outdir=/tmp/lit.out.d
    for testin in $(find ./tests -mindepth 1 -maxdepth 1 -name '*.out' -prune -o -print)
    do
        [ -d $outdir ] && rm -r $outdir
        mkdir /tmp/lit.out.d
        testout=$testin.out
        if [ "$1" == "generate" ]
        then
            echo "generating $testout"
            recurse -o $outdir "$testin"
            cp $outdir/index.html "$testout"
        elif [ ! -f "$testout" ]
        then
            fail "expected test output not found: $testout"
        else
            echo "running $testin"
            recurse -o $outdir "$testin"
            diff "$testout" $outdir/index.html || fail "failed test: $testin"
        fi
    done
    echo "all tests passed"
}

ptest=
pmeta=
pheader=
pfooter=
pdir=${LIT_OUT_DIR:-$(pwd)}
pscripts=${LIT_SCRIPT_DIR:-$(dirname "$0")/scripts}

while getopts :t:m:h:f:o: arg
do
    case "$arg" in
        t) ptest=$OPTARG ;;
        m) pmeta=$OPTARG ;;
        h) pheader=$OPTARG ;;
        f) pfooter=$OPTARG ;;
        o) pdir=$OPTARG ;;
        :) usage "-$OPTARG requires an argument" ;;
        ?) usage "unknown option -$OPTARG" ;;
    esac
done

if [ ! -z "$ptest" ]
then
    dotest "$ptest"
    exit 0
fi

shift $(( OPTIND - 1 ))
pfiles=( "$@" )

if [ ${#pfiles[@]} -eq 0 ]
then
    usage "you must provide at least one input file"
fi

[ -d "$pdir" ] || mkdir "$pdir"

cat > "$pdir/index.html" <<EOF
<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
EOF

[ -f "$pmeta" ] && cat "$pmeta" >> "$pdir/index.html"

awk -f "$pscripts/lit-utils.awk" -f "$pscripts/lit-meta.awk" "${pfiles[@]}" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</head>
<body>
EOF

[ -f "$pheader" ] && cat "$pheader" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
<main>
<article>
EOF

awk -f "$pscripts/lit-utils.awk" -f "$pscripts/lit-main.awk" "${pfiles[@]}" | \
    tee "$pdir/index.md" | \
    md2html >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</article>
</main>
EOF

[ -f "$pfooter" ] && cat "$pfooter" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</body>
</html>
EOF
