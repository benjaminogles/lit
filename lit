#! /usr/bin/env bash

set -e
set -o pipefail

fail() {
    echo "$1" >&2
    exit 2
}

usage() {
    cat >&2 <<EOF
$1
usage: lit [options] format file1 [file2 ...]

options:
    -m extra-meta-html-file (e.g. stylesheets, open graph meta)
    -h extra-header-html-file (e.g. site banner)
    -f extra-footer-html-file (e.g. script tags, site links)
    -o output-directory

output formats:
    markdown (html flags have no effect)
    html

description:
    input files may contain markdown or source code

    lit translates source code to markdown and concatenates
    the result of each input file into a single document,
    optionally converting to HTML and constructing a complete
    web page together with any HTML content provided via
    command line options

    the output file is named index.md or index.html and is
    written to the current working directory by default

    input files may contain directives that prompt lit to e.g.
    build and run programs, piping the output into the markdown
    document

    any site assets generated by these programs should be
    written to the current working directory so lit can detect
    them
EOF
    exit 1
}

recurse() {
    "$0" "$@"
}

dotest() {
    indir=/tmp/lit.in.d
    outdir=/tmp/lit.out.d
    [ -d ./tests ] || fail "test directory does not exist"
    for testin in $(find ./tests -mindepth 1 -maxdepth 1 -name '*.html' -o -name '*.md' -prune -o -print)
    do
        [ -d $indir ] && rm -r $indir
        [ -d $outdir ] && rm -r $outdir
        mkdir $indir $outdir
        if [ -d "$testin" ]
        then
            testargs=( $(find "$testin" -mindepth 1 -maxdepth 1 -type f) )
        else
            testargs=( "$testin" )
        fi
        cp "${testargs[@]}" $indir/
        testargs=( $indir/* )
        if [ "$1" == "generate" ]
        then
            echo "generating $testin.md and $testin.html"
            recurse -o $outdir markdown "${testargs[@]}"
            recurse -o $outdir html "${testargs[@]}"
            cp $outdir/index.md "$testin.md"
            cp $outdir/index.html "$testin.html"
        elif [ ! -f "$testin.md" ]
        then
            fail "expected test output not found: $testin.md"
        elif [ ! -f "$testin.html" ]
        then
            fail "expected test output not found: $testin.html"
        else
            echo "running $testin"
            recurse -o $outdir markdown "${testargs[@]}"
            recurse -o $outdir html "${testargs[@]}"
            diff "$testin.md" $outdir/index.md || fail "failed test: $testin"
            diff "$testin.html" $outdir/index.html || fail "failed test: $testin"
        fi
    done
    rm -r $indir $outdir
    echo "all tests passed"
}

domarkdown() {
    for infile in "$@"
    do
        pushd "$(dirname "$infile")" > /dev/null
        awk -f "$pscripts/lit-utils.awk" -f "$pscripts/lit-main.awk" "$(basename "$infile")"
        popd > /dev/null
    done
}

dohtml() {
    cat <<EOF
<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
EOF

    [ -f "$pmeta" ] && cat "$pmeta"

    awk -f "$pscripts/lit-utils.awk" -f "$pscripts/lit-meta.awk" "$@"

    cat <<EOF
</head>
<body>
EOF

    [ -f "$pheader" ] && cat "$pheader"

    cat <<EOF
<main>
<article>
EOF

    domarkdown "$@" | md2html

    cat <<EOF
</article>
</main>
EOF

    [ -f "$pfooter" ] && cat "$pfooter"

    cat <<EOF
</body>
</html>
EOF
}

ptest=
pmeta=
pheader=
pfooter=
pdir=${LIT_OUT_DIR:-$(pwd)}
pscripts=$(cd $(dirname "$0"); pwd -P)/scripts

while getopts :t:m:h:f:o: arg
do
    case "$arg" in
        t) ptest=$OPTARG ;;
        m) pmeta=$OPTARG ;;
        h) pheader=$OPTARG ;;
        f) pfooter=$OPTARG ;;
        o) pdir=$OPTARG ;;
        :) usage "-$OPTARG requires an argument" ;;
        ?) usage "unknown option -$OPTARG" ;;
    esac
done

if [ ! -z "$ptest" ]
then
    dotest "$ptest"
    exit 0
fi

shift $(( OPTIND - 1 ))
pformat="$1"
shift
pfiles=( "$@" )

if [ ${#pfiles[@]} -eq 0 ]
then
    usage "you must provide at least one input file"
fi

[ -d "$pdir" ] || mkdir "$pdir"

if [ "$pformat" == "html" ]
then
    dohtml "${pfiles[@]}" > "$pdir/index.html"
elif [ "$pformat" == "markdown" ]
then
    domarkdown "${pfiles[@]}" > "$pdir/index.md"
else
    fail "unknown format: $pformat"
fi
