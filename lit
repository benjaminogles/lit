#! /usr/bin/env bash

set -e
set -o pipefail

fail() {
    echo "$1" >&2
    exit 2
}

usage() {
    cat >&2 <<EOF
$1
usage: lit [options] file...

options:
    -m meta-html-file
    -h header-html-file
    -f footer-html-file
    -o output-directory
    -t [assert|generate]

description:
    lit generates an HTML document from source code and writes it
    to {output-directory}/index.html

    the default output directory can be given by the LIT_OUT_DIR
    environment variable and is otherwise given by \$(pwd)

    the input file can be

    - a single file
    - a directory (all files in the directory are processed)
    - the string "-" (standard input is processed)

    the meta HTML file is inlined into the head of the final document
    if provided

    the header and footer HTML files given in command line options
    are inlined into the top and bottom of the final document's body

    other HTML content is generated by scripts that are invoked
    according to lit-comments appearing in the input file(s)
    and is inlined into the main article of the final document

    any assets generated by these scripts should also be written
    to {output-directory}

    see the lit readme for more information on developing scripts
    to customize how lit works for you

    if the working directory contains a ./tests directory, then
    running tests with the "assert" argument will check that the
    output of the following command

    lit -o {tempdir} ./tests/{file}.in

    matches the contents of ./tests/{file}.out for all files and
    directories with names in ./tests/*.in

    running tests with the "generate" argument will (re)generate the
    files ./tests/{file}.out
EOF
    exit 1
}

recurse() {
    "$0" "$@"
}

dotest() {
    [ -d ./tests ] || fail "test directory does not exist"
    echo "running tests..."
    outdir=/tmp/lit.out.d
    for testin in $(find ./tests -name '*.in')
    do
        [ -d $outdir ] && rm -r $outdir
        mkdir /tmp/lit.out.d
        testout=${testin%.in}.out
        if [ "$1" == "generate" ]
        then
            echo "generating $testout"
            recurse -o $outdir "$testin"
            cp $outdir/index.html "$testout"
        elif [ ! -f "$testout" ]
        then
            fail "expected test output not found: $testout"
        else
            recurse -o $outdir "$testin"
            diff "$testout" $outdir/index.html || fail "failed test: $testin"
        fi
    done
    echo "all tests passed"
}

ptest=
pmeta=
pheader=
pfooter=
pdir=${LIT_OUT_DIR:-$(pwd)}
pscripts=${LIT_SCRIPT_DIR:-$(dirname "$0")/scripts}

while getopts :t:m:h:f:o: arg
do
    case "$arg" in
        t) ptest=$OPTARG ;;
        m) pmeta=$OPTARG ;;
        h) pheader=$OPTARG ;;
        f) pfooter=$OPTARG ;;
        o) pdir=$OPTARG ;;
        :) usage "-$OPTARG requires an argument" ;;
        ?) usage "unknown option -$OPTARG" ;;
    esac
done

if [ ! -z "$ptest" ]
then
    dotest "$ptest"
    exit 0
fi

shift $(( OPTIND - 1 ))
pfile=$1
pfiles=( "$pfile" )

if [ -z "$pfile" ]
then
    usage "you must provide an input file or directory"
elif [ "$pfile" == "-" ]
then
    cat - > /tmp/lit.in
    pfiles=( /tmp/lit.in )
elif [ -d "$pfile" ]
then
    pfiles=( $(find "$pfile" -type f -maxdepth 1) )
elif [ ! -f "$pfile" ]
then
    usage "could not find input file: $pfile"
fi

[ -d "$pdir" ] || mkdir "$pdir"

cat > "$pdir/index.html" <<EOF
<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
EOF

[ -f "$pmeta" ] && cat "$pmeta" >> "$pdir/index.html"

awk -f "$pscripts/lit-meta.awk" "${pfiles[@]}" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</head>
<body>
EOF

[ -f "$pheader" ] && cat "$pheader" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
<main>
<article>
EOF

awk -f "$pscripts/lit-main.awk" "${pfiles[@]}" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</article>
</main>
EOF

[ -f "$pfooter" ] && cat "$pfooter" >> "$pdir/index.html"

cat >> "$pdir/index.html" <<EOF
</body>
</html>
EOF
